#!/bin/bash
set -e
PREFIX="[dataclayprepare]"
function dataclayecho(){ echo "$PREFIX ${1}"; }
function dataclayerr(){ echo "!! $PREFIX ERROR: ${1}"; exit 1; }
function dataclaywarn(){ echo "$PREFIX WARNING: ${1}"; }
function dataclayinfo(){ echo "$PREFIX ${1}"; }
# Args
declare -a ARGS
while test $# -gt 0
do
	case "$1" in
			--jobid)
				shift 
		    	export DATACLAY_JOBID=$1
	            dataclayecho "- provided job id = $DATACLAY_JOBID"
		    	;;
			--*) 
				dataclayerr "Wrong option $1 provided" 
				;;
			*)  
				ARGS+=(${1})
            ;;
    esac
    shift
done

if [ ${#ARGS[@]} -ne 4 ]; then
    dataclayerr "Wrong number of arguments. Found ${ARGS[@]}
             Usage: $0 <modelpath> <appsrcpath> <namespace> <language> <--option1> <--option2...> where: 
                  - modelpath: path where .py files or .class files are located depending on the language 
                  - language: either java or python
	"
fi 

MODELSRCPATH="${ARGS[0]}"
APP_SOURCE="${ARGS[1]}"
DATACLAY_NAMESPACE="${ARGS[2]}"
LANGUAGE="${ARGS[3]}"
# Check paths
if [[ $MODELSRCPATH != /* ]]; then
    dataclayerr "Model path must be absolute. Found $MODELSRCPATH" 
fi
if [ ! -d $MODELSRCPATH ]; then
    dataclayerr "Model path does not exist. Found $MODELSRCPATH"
fi
if [[ $APP_SOURCE != /* ]]; then
    dataclayerr "App source path must be absolute. Found ${APP_SOURCE}" 
fi

# ------------------------------ dataClay Job configuration -------------------------------------------
if [ ! -z $SLURM_JOBID ]; then 
	export DATACLAY_JOBID=$SLURM_JOBID
    dataclaywarn "SLURM JOB ID detected. Using it. DATACLAY_JOBID = $DATACLAY_JOBID"
fi
if [ -z $DATACLAY_JOBID ]; then 
	ID=$(dataclayid $PPID)
	if [ ! -z $ID ]; then export DATACLAY_JOBID=$ID; fi
	if [ -z $DATACLAY_JOBID ]; then
    	dataclayerr "DATACLAY_JOBID not found. Aborting."
	fi
fi 

source $HOME/.dataClay/$DATACLAY_JOBID/client.config

# Source prolog script 
if [ ! -z $PROLOG ]; then 
	if [[ $PROLOG != /* ]]; then source $DATACLAY_PROLOGS/$PROLOG
	else source $PROLOG; fi
fi

#------------------------------------------------------------------------------------------------------

# Register account  
dataclay NewAccount $DATACLAY_USR $DATACLAY_PWD
# Register datacontract
dataclay NewDataContract ${DATACLAY_USR} ${DATACLAY_PWD} ${DATACLAY_DATASET} ${DATACLAY_USR}
# Register model
if [ $LANGUAGE == "java" ]; then 
	# Compile classes 
	scp -q -r ${MODELSRCPATH} ${CLIENTNODE}:${MODEL_PATH}
	echo "$SERVICE_FOLDER/client exec javac -source $DATACLAY_JAVA_VERSION -target $DATACLAY_JAVA_VERSION \$(find ${MODEL_PATH} -name *.java) -d ${MODEL_BIN_PATH}" | ssh "${CLIENTNODE}" bash -s
else 
	scp -q -r ${MODELSRCPATH}/* ${CLIENTNODE}:${MODEL_BIN_PATH}
fi 
dataclay NewModel ${DATACLAY_USR} ${DATACLAY_PWD} ${DATACLAY_NAMESPACE} ${MODEL_BIN_PATH} $LANGUAGE
# Get stubs 
dataclay GetStubs ${DATACLAY_USR} ${DATACLAY_PWD} ${DATACLAY_NAMESPACE} ${STUBS_PATH}

# Compile java app
if [ $LANGUAGE == "java" ]; then 
	if [[ $APP_SOURCE != /* ]]; then
	    dataclayerr "App source path must be absolute. Found ${APP_SOURCE}" 
	fi
	dataclayinfo "Compiling application from ${APP_SOURCE} to ${APP_BIN_PATH}"
	
	scp -r -q ${APP_SOURCE} ${CLIENTNODE}:${APP_PATH}
	echo "$SERVICE_FOLDER/client exec javac -cp ${STUBS_PATH}:${DATACLAY_JAR}:${COMPSS_HOME}/Runtime/compss-engine.jar \$(find $APP_PATH -name *.java) -d ${APP_BIN_PATH}" | ssh "${CLIENTNODE}" bash -s
fi
if [ $LANGUAGE == "python" ]; then 
	scp -r -q ${APP_SOURCE} ${CLIENTNODE}:${APP_PATH}
fi








